plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'application'
}

mainClassName = "me.coley.recaf.Main"

configurations {
    common
    implementation.extendsFrom common
}

dependencies {
    implementation project(':recaf-core')
    implementation awaitility
    implementation docking
    implementation hppc
    implementation richtextfx

    // TODO: Replace once 0.0.4 is released officially
    implementation 'com.github.Col-E:fxgraph:0.0.4'
    implementation pe
    implementation jelf
    implementation beanshell
    // We compile against JFX but do not bundle. The launcher will download the platform specific implementation for end users.
    def javafxPlatform = getJavaFxPlatform()
    def javafxVersion = '18'
    compileOnly group: 'org.openjfx', name: 'javafx-base', version: javafxVersion, classifier: javafxPlatform
    compileOnly group: 'org.openjfx', name: 'javafx-graphics', version: javafxVersion, classifier: javafxPlatform
    compileOnly group: 'org.openjfx', name: 'javafx-controls', version: javafxVersion, classifier: javafxPlatform
}

shadowJar {
    // Configured to match legacy release naming conventions.
    // This prevents major breaking of prior automated systems that depend on
    // the full release of the jar fitting a given pattern.
    archiveBaseName.set('recaf')
    archiveClassifier.set('J11-jar-with-dependencies')
    archiveVersion.set(project.version)
    // We do not really want to minimize the output (auto-remove unused code)
    // but the shadow plugin provides no other way of filtering output.
    // This works, but I'm very confused by it.
    minimize {
        // EXCLUDE on a file path: Excludes files matching the given pattern from the output
        exclude("com/ibm/icu/impl/data/icudt70b/*")  // ANTLR doesn't need Icu4J's resources (14 mb)
        // EXCLUDE on a dependency: Includes all files from the dependency
        exclude(dependency('org.beanshell:.*:.*'))
    }
}

private static def getJavaFxPlatform() {
    def os = System.getProperty('os.name').toLowerCase(Locale.ENGLISH)
    if (os.contains('win')) {
        return 'win'
    }
    if (os.contains('nix') || os.contains('nux')) {
        return 'linux'
    }
    if (os.contains('osx') || os.contains('mac')) {
        return 'mac'
    }
    assert false: "unknown os: $os"
}

jar {
    manifest.attributes('Main-Class': mainClassName)
}
