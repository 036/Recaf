package me.coley.recaf.ui.plugin.item;

import dev.xdark.recaf.plugin.RecafPlugin;
import me.coley.recaf.config.Configs;

import java.io.IOException;
import java.net.URI;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

/**
 * Local plugin information, used for UI display
 *
 * @author xtherk
 */
public class InstalledPluginItem extends PluginItem {

    /**
     * @param uri         The path where the plugin is located
     * @param name        name of the plugin.
     * @param version     plugin version.
     * @param author      author of the plugin.
     * @param description plugin description.
     */
    public InstalledPluginItem(URI uri, String name, String version, String author, String description) {
        super(uri, name, version, author, description);
    }

    /**
     *
     * @return Because the Item generated by the installed plugin, it will always return to true
     */
    @Override
    public boolean isInstalled() {
        return true;
    }

    /**
     * Disable the plugin
     */
    public void disable() {
        RecafPlugin.getInstance()
                .getPlugin(name)
                .ifPresent(pc -> {
                    pc.getLoader().disablePlugin(pc);
                    Configs.plugin().setEnabled(pc.getInformation(), false);
                });
    }

    /**
     * Enable the plugin
     */
    public void enable() {
        RecafPlugin.getInstance()
                .getPlugin(name)
                .ifPresent(pc -> {
                    pc.getLoader().enablePlugin(pc);
                    Configs.plugin().setEnabled(pc.getInformation(), true);
                });
    }

    /**
     * Uninstall the plugin
     */
    public void uninstall() {
        RecafPlugin.getInstance().unloadPlugin(name);
        Path path = Paths.get(uri.getPath());
        try {
            Files.deleteIfExists(path);
            Configs.plugin().descriptor.remove(name);
        } catch (IOException ignored) {
            // NO-OP
        }
    }

}
